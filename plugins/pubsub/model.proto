syntax = "proto3";

package unitdb;

option go_package='.;unitdb';

// Pubsub interface
service Pubsub {
rpc Start (ConnInfo) returns (ConnInfo){}

rpc Stream (stream Packet) returns (stream Packet);

rpc Stop (Empty) returns (Empty){}
}

message Empty {
}

message Packet {
bytes data=1;
}

message ConnInfo {
string client_id=1;
string network=2;
string address=3;
}

message InMsg {
	oneof Message {
		Pingreq pingreq = 1;
		Subscribe sub = 2;
		Unsubscribe unsub = 3;
		Publish pub=4;
	}
}

message OutMsg {
	oneof Message {
		Pingresp pingresp = 1;
		Suback suback = 2;
		Unsuback unsuback = 3;
		Publish pub = 4;
		Puback puback = 5;
	}
}

enum MessageType {
	RESERVED  = 0;
	CONNECT=1;
	CONNACK=2;
	PUBLISH=3;
	PUBACK=4;
	SUBSCRIBE=5;
	SUBACK=6;
	UNSUBSCRIBE=7;
	UNSUBACK=8;
	PINGREQ=9;
	PINGRESP=10;
	DISCONNECT=11;
}

message FixedHeader {
	MessageType messageType = 1;
	int32 remainingLength=2;
}

// Connect represents a connect packet.
message Conn {
	string protoName=1;
	int32 version=2;
	bool insecureFlag=3;
	bool usernameFlag=4;
	bool passwordFlag=5;
	bool cleanSessFlag=6;
	int32 keepAlive=7;
	string clientID=8;
	string username=9;
	string password=10;
}

// Connack represents a connack packet.
// 0x00 connection accepted
// 0x01 refused: unacceptable proto version
// 0x02 refused: identifier rejected
// 0x03 refused server unavailiable
// 0x04 bad user or password
// 0x05 not authorized
message Connack {
	int32 returnCode=1;
	int32 connID=2;
}

//Pingreq is a keepalive
message Pingreq {
}

//Pingresp is for saying "hey, the server is alive"
message Pingresp {
}

//Disconnect is to signal you want to cease communications with the server
message Disconnect {
	int32 messageID=1;
}

// Publish represents a publish packet.
message Publish {
	int32 messageID=1;
	string topic=2;
	string payload=3;
}

//Puback is sent to verify the receipt of a publish
message Puback {
	int32 messageID=1;
}

//Subscriber is pairing the Qos and topic together
//for the QOS' pairs in unsubscribe and subscribe
message Subscriber {
	string topic=1;
}

//Subscribe tells the server which topics the client would like to subscribe to
message Subscribe {
	int32 messageID=1;
	repeated Subscriber subscribers=2;
}

//Suback is to say "hey, you got it buddy. I will send you messages that fit this pattern"
message Suback {
	int32 messageID=1;
}

//Unsubscribe is the Packet to send if you don't want to subscribe to a topic anymore
message Unsubscribe {
	int32 messageID=1;
	repeated Subscriber subscribers=2;
}

//Unsuback is to unsubscribe as suback is to subscribe
message Unsuback {
	int32 messageID=1;
}