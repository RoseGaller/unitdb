// Code generated by protoc-gen-go. DO NOT EDIT.
// source: unitdb.proto

/*
Package unitdb is a generated protocol buffer package.

It is generated from these files:
	unitdb.proto

It has these top-level messages:
	Empty
	Packet
	ConnInfo
	InMsg
	OutMsg
	FixedHeader
	Conn
	Connack
	Pingreq
	Pingresp
	Disconnect
	QueryRequest
	Result
	QueryResponse
	PutRequest
	PutResponse
	DeleteRequest
	DeleteResponse
	Publish
	Puback
	Pubrec
	Pubrel
	Pubcomp
	Subscriber
	Subscribe
	Suback
	Unsubscribe
	Unsuback
*/
package unitdb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_RESERVED    MessageType = 0
	MessageType_CONNECT     MessageType = 1
	MessageType_CONNACK     MessageType = 2
	MessageType_PUBLISH     MessageType = 3
	MessageType_PUBACK      MessageType = 4
	MessageType_PUBREC      MessageType = 5
	MessageType_PUBREL      MessageType = 6
	MessageType_PUBCOMP     MessageType = 7
	MessageType_SUBSCRIBE   MessageType = 8
	MessageType_SUBACK      MessageType = 9
	MessageType_UNSUBSCRIBE MessageType = 10
	MessageType_UNSUBACK    MessageType = 11
	MessageType_PINGREQ     MessageType = 12
	MessageType_PINGRESP    MessageType = 13
	MessageType_QUERY       MessageType = 14
	MessageType_RESULT      MessageType = 15
	MessageType_PUT         MessageType = 16
	MessageType_PUTRESP     MessageType = 17
	MessageType_DEL         MessageType = 18
	MessageType_DELRESP     MessageType = 19
	MessageType_DISCONNECT  MessageType = 20
)

var MessageType_name = map[int32]string{
	0:  "RESERVED",
	1:  "CONNECT",
	2:  "CONNACK",
	3:  "PUBLISH",
	4:  "PUBACK",
	5:  "PUBREC",
	6:  "PUBREL",
	7:  "PUBCOMP",
	8:  "SUBSCRIBE",
	9:  "SUBACK",
	10: "UNSUBSCRIBE",
	11: "UNSUBACK",
	12: "PINGREQ",
	13: "PINGRESP",
	14: "QUERY",
	15: "RESULT",
	16: "PUT",
	17: "PUTRESP",
	18: "DEL",
	19: "DELRESP",
	20: "DISCONNECT",
}
var MessageType_value = map[string]int32{
	"RESERVED":    0,
	"CONNECT":     1,
	"CONNACK":     2,
	"PUBLISH":     3,
	"PUBACK":      4,
	"PUBREC":      5,
	"PUBREL":      6,
	"PUBCOMP":     7,
	"SUBSCRIBE":   8,
	"SUBACK":      9,
	"UNSUBSCRIBE": 10,
	"UNSUBACK":    11,
	"PINGREQ":     12,
	"PINGRESP":    13,
	"QUERY":       14,
	"RESULT":      15,
	"PUT":         16,
	"PUTRESP":     17,
	"DEL":         18,
	"DELRESP":     19,
	"DISCONNECT":  20,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Packet struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Packet) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ConnInfo struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Network  string `protobuf:"bytes,2,opt,name=network" json:"network,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *ConnInfo) Reset()                    { *m = ConnInfo{} }
func (m *ConnInfo) String() string            { return proto.CompactTextString(m) }
func (*ConnInfo) ProtoMessage()               {}
func (*ConnInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConnInfo) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ConnInfo) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *ConnInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type InMsg struct {
	// Types that are valid to be assigned to Message:
	//	*InMsg_Pingreq
	//	*InMsg_Sub
	//	*InMsg_Unsub
	//	*InMsg_Pub
	//	*InMsg_Query
	//	*InMsg_Put
	//	*InMsg_Del
	Message isInMsg_Message `protobuf_oneof:"Message"`
}

func (m *InMsg) Reset()                    { *m = InMsg{} }
func (m *InMsg) String() string            { return proto.CompactTextString(m) }
func (*InMsg) ProtoMessage()               {}
func (*InMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isInMsg_Message interface {
	isInMsg_Message()
}

type InMsg_Pingreq struct {
	Pingreq *Pingreq `protobuf:"bytes,1,opt,name=pingreq,oneof"`
}
type InMsg_Sub struct {
	Sub *Subscribe `protobuf:"bytes,2,opt,name=sub,oneof"`
}
type InMsg_Unsub struct {
	Unsub *Unsubscribe `protobuf:"bytes,3,opt,name=unsub,oneof"`
}
type InMsg_Pub struct {
	Pub *Publish `protobuf:"bytes,4,opt,name=pub,oneof"`
}
type InMsg_Query struct {
	Query *QueryRequest `protobuf:"bytes,5,opt,name=query,oneof"`
}
type InMsg_Put struct {
	Put *PutRequest `protobuf:"bytes,6,opt,name=put,oneof"`
}
type InMsg_Del struct {
	Del *DeleteRequest `protobuf:"bytes,7,opt,name=del,oneof"`
}

func (*InMsg_Pingreq) isInMsg_Message() {}
func (*InMsg_Sub) isInMsg_Message()     {}
func (*InMsg_Unsub) isInMsg_Message()   {}
func (*InMsg_Pub) isInMsg_Message()     {}
func (*InMsg_Query) isInMsg_Message()   {}
func (*InMsg_Put) isInMsg_Message()     {}
func (*InMsg_Del) isInMsg_Message()     {}

func (m *InMsg) GetMessage() isInMsg_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *InMsg) GetPingreq() *Pingreq {
	if x, ok := m.GetMessage().(*InMsg_Pingreq); ok {
		return x.Pingreq
	}
	return nil
}

func (m *InMsg) GetSub() *Subscribe {
	if x, ok := m.GetMessage().(*InMsg_Sub); ok {
		return x.Sub
	}
	return nil
}

func (m *InMsg) GetUnsub() *Unsubscribe {
	if x, ok := m.GetMessage().(*InMsg_Unsub); ok {
		return x.Unsub
	}
	return nil
}

func (m *InMsg) GetPub() *Publish {
	if x, ok := m.GetMessage().(*InMsg_Pub); ok {
		return x.Pub
	}
	return nil
}

func (m *InMsg) GetQuery() *QueryRequest {
	if x, ok := m.GetMessage().(*InMsg_Query); ok {
		return x.Query
	}
	return nil
}

func (m *InMsg) GetPut() *PutRequest {
	if x, ok := m.GetMessage().(*InMsg_Put); ok {
		return x.Put
	}
	return nil
}

func (m *InMsg) GetDel() *DeleteRequest {
	if x, ok := m.GetMessage().(*InMsg_Del); ok {
		return x.Del
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InMsg_OneofMarshaler, _InMsg_OneofUnmarshaler, _InMsg_OneofSizer, []interface{}{
		(*InMsg_Pingreq)(nil),
		(*InMsg_Sub)(nil),
		(*InMsg_Unsub)(nil),
		(*InMsg_Pub)(nil),
		(*InMsg_Query)(nil),
		(*InMsg_Put)(nil),
		(*InMsg_Del)(nil),
	}
}

func _InMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InMsg)
	// Message
	switch x := m.Message.(type) {
	case *InMsg_Pingreq:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pingreq); err != nil {
			return err
		}
	case *InMsg_Sub:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sub); err != nil {
			return err
		}
	case *InMsg_Unsub:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unsub); err != nil {
			return err
		}
	case *InMsg_Pub:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pub); err != nil {
			return err
		}
	case *InMsg_Query:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Query); err != nil {
			return err
		}
	case *InMsg_Put:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Put); err != nil {
			return err
		}
	case *InMsg_Del:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Del); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InMsg.Message has unexpected type %T", x)
	}
	return nil
}

func _InMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InMsg)
	switch tag {
	case 1: // Message.pingreq
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pingreq)
		err := b.DecodeMessage(msg)
		m.Message = &InMsg_Pingreq{msg}
		return true, err
	case 2: // Message.sub
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Subscribe)
		err := b.DecodeMessage(msg)
		m.Message = &InMsg_Sub{msg}
		return true, err
	case 3: // Message.unsub
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Unsubscribe)
		err := b.DecodeMessage(msg)
		m.Message = &InMsg_Unsub{msg}
		return true, err
	case 4: // Message.pub
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Publish)
		err := b.DecodeMessage(msg)
		m.Message = &InMsg_Pub{msg}
		return true, err
	case 5: // Message.query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QueryRequest)
		err := b.DecodeMessage(msg)
		m.Message = &InMsg_Query{msg}
		return true, err
	case 6: // Message.put
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutRequest)
		err := b.DecodeMessage(msg)
		m.Message = &InMsg_Put{msg}
		return true, err
	case 7: // Message.del
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteRequest)
		err := b.DecodeMessage(msg)
		m.Message = &InMsg_Del{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InMsg)
	// Message
	switch x := m.Message.(type) {
	case *InMsg_Pingreq:
		s := proto.Size(x.Pingreq)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InMsg_Sub:
		s := proto.Size(x.Sub)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InMsg_Unsub:
		s := proto.Size(x.Unsub)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InMsg_Pub:
		s := proto.Size(x.Pub)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InMsg_Query:
		s := proto.Size(x.Query)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InMsg_Put:
		s := proto.Size(x.Put)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InMsg_Del:
		s := proto.Size(x.Del)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OutMsg struct {
	// Types that are valid to be assigned to Message:
	//	*OutMsg_Pingresp
	//	*OutMsg_Suback
	//	*OutMsg_Unsuback
	//	*OutMsg_Pub
	//	*OutMsg_Puback
	//	*OutMsg_Resp
	//	*OutMsg_Putresp
	//	*OutMsg_Delresp
	Message isOutMsg_Message `protobuf_oneof:"Message"`
}

func (m *OutMsg) Reset()                    { *m = OutMsg{} }
func (m *OutMsg) String() string            { return proto.CompactTextString(m) }
func (*OutMsg) ProtoMessage()               {}
func (*OutMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isOutMsg_Message interface {
	isOutMsg_Message()
}

type OutMsg_Pingresp struct {
	Pingresp *Pingresp `protobuf:"bytes,1,opt,name=pingresp,oneof"`
}
type OutMsg_Suback struct {
	Suback *Suback `protobuf:"bytes,2,opt,name=suback,oneof"`
}
type OutMsg_Unsuback struct {
	Unsuback *Unsuback `protobuf:"bytes,3,opt,name=unsuback,oneof"`
}
type OutMsg_Pub struct {
	Pub *Publish `protobuf:"bytes,4,opt,name=pub,oneof"`
}
type OutMsg_Puback struct {
	Puback *Puback `protobuf:"bytes,5,opt,name=puback,oneof"`
}
type OutMsg_Resp struct {
	Resp *QueryResponse `protobuf:"bytes,6,opt,name=resp,oneof"`
}
type OutMsg_Putresp struct {
	Putresp *PutResponse `protobuf:"bytes,7,opt,name=putresp,oneof"`
}
type OutMsg_Delresp struct {
	Delresp *DeleteResponse `protobuf:"bytes,8,opt,name=delresp,oneof"`
}

func (*OutMsg_Pingresp) isOutMsg_Message() {}
func (*OutMsg_Suback) isOutMsg_Message()   {}
func (*OutMsg_Unsuback) isOutMsg_Message() {}
func (*OutMsg_Pub) isOutMsg_Message()      {}
func (*OutMsg_Puback) isOutMsg_Message()   {}
func (*OutMsg_Resp) isOutMsg_Message()     {}
func (*OutMsg_Putresp) isOutMsg_Message()  {}
func (*OutMsg_Delresp) isOutMsg_Message()  {}

func (m *OutMsg) GetMessage() isOutMsg_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *OutMsg) GetPingresp() *Pingresp {
	if x, ok := m.GetMessage().(*OutMsg_Pingresp); ok {
		return x.Pingresp
	}
	return nil
}

func (m *OutMsg) GetSuback() *Suback {
	if x, ok := m.GetMessage().(*OutMsg_Suback); ok {
		return x.Suback
	}
	return nil
}

func (m *OutMsg) GetUnsuback() *Unsuback {
	if x, ok := m.GetMessage().(*OutMsg_Unsuback); ok {
		return x.Unsuback
	}
	return nil
}

func (m *OutMsg) GetPub() *Publish {
	if x, ok := m.GetMessage().(*OutMsg_Pub); ok {
		return x.Pub
	}
	return nil
}

func (m *OutMsg) GetPuback() *Puback {
	if x, ok := m.GetMessage().(*OutMsg_Puback); ok {
		return x.Puback
	}
	return nil
}

func (m *OutMsg) GetResp() *QueryResponse {
	if x, ok := m.GetMessage().(*OutMsg_Resp); ok {
		return x.Resp
	}
	return nil
}

func (m *OutMsg) GetPutresp() *PutResponse {
	if x, ok := m.GetMessage().(*OutMsg_Putresp); ok {
		return x.Putresp
	}
	return nil
}

func (m *OutMsg) GetDelresp() *DeleteResponse {
	if x, ok := m.GetMessage().(*OutMsg_Delresp); ok {
		return x.Delresp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OutMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OutMsg_OneofMarshaler, _OutMsg_OneofUnmarshaler, _OutMsg_OneofSizer, []interface{}{
		(*OutMsg_Pingresp)(nil),
		(*OutMsg_Suback)(nil),
		(*OutMsg_Unsuback)(nil),
		(*OutMsg_Pub)(nil),
		(*OutMsg_Puback)(nil),
		(*OutMsg_Resp)(nil),
		(*OutMsg_Putresp)(nil),
		(*OutMsg_Delresp)(nil),
	}
}

func _OutMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OutMsg)
	// Message
	switch x := m.Message.(type) {
	case *OutMsg_Pingresp:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pingresp); err != nil {
			return err
		}
	case *OutMsg_Suback:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Suback); err != nil {
			return err
		}
	case *OutMsg_Unsuback:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unsuback); err != nil {
			return err
		}
	case *OutMsg_Pub:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pub); err != nil {
			return err
		}
	case *OutMsg_Puback:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Puback); err != nil {
			return err
		}
	case *OutMsg_Resp:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Resp); err != nil {
			return err
		}
	case *OutMsg_Putresp:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Putresp); err != nil {
			return err
		}
	case *OutMsg_Delresp:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Delresp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("OutMsg.Message has unexpected type %T", x)
	}
	return nil
}

func _OutMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OutMsg)
	switch tag {
	case 1: // Message.pingresp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pingresp)
		err := b.DecodeMessage(msg)
		m.Message = &OutMsg_Pingresp{msg}
		return true, err
	case 2: // Message.suback
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Suback)
		err := b.DecodeMessage(msg)
		m.Message = &OutMsg_Suback{msg}
		return true, err
	case 3: // Message.unsuback
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Unsuback)
		err := b.DecodeMessage(msg)
		m.Message = &OutMsg_Unsuback{msg}
		return true, err
	case 4: // Message.pub
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Publish)
		err := b.DecodeMessage(msg)
		m.Message = &OutMsg_Pub{msg}
		return true, err
	case 5: // Message.puback
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Puback)
		err := b.DecodeMessage(msg)
		m.Message = &OutMsg_Puback{msg}
		return true, err
	case 6: // Message.resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QueryResponse)
		err := b.DecodeMessage(msg)
		m.Message = &OutMsg_Resp{msg}
		return true, err
	case 7: // Message.putresp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PutResponse)
		err := b.DecodeMessage(msg)
		m.Message = &OutMsg_Putresp{msg}
		return true, err
	case 8: // Message.delresp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteResponse)
		err := b.DecodeMessage(msg)
		m.Message = &OutMsg_Delresp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _OutMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OutMsg)
	// Message
	switch x := m.Message.(type) {
	case *OutMsg_Pingresp:
		s := proto.Size(x.Pingresp)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OutMsg_Suback:
		s := proto.Size(x.Suback)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OutMsg_Unsuback:
		s := proto.Size(x.Unsuback)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OutMsg_Pub:
		s := proto.Size(x.Pub)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OutMsg_Puback:
		s := proto.Size(x.Puback)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OutMsg_Resp:
		s := proto.Size(x.Resp)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OutMsg_Putresp:
		s := proto.Size(x.Putresp)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *OutMsg_Delresp:
		s := proto.Size(x.Delresp)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type FixedHeader struct {
	MessageType     MessageType `protobuf:"varint,1,opt,name=messageType,enum=MessageType" json:"messageType,omitempty"`
	Dup             bool        `protobuf:"varint,2,opt,name=dup" json:"dup,omitempty"`
	Qos             int32       `protobuf:"varint,3,opt,name=qos" json:"qos,omitempty"`
	Retain          bool        `protobuf:"varint,4,opt,name=retain" json:"retain,omitempty"`
	RemainingLength int32       `protobuf:"varint,5,opt,name=remainingLength" json:"remainingLength,omitempty"`
}

func (m *FixedHeader) Reset()                    { *m = FixedHeader{} }
func (m *FixedHeader) String() string            { return proto.CompactTextString(m) }
func (*FixedHeader) ProtoMessage()               {}
func (*FixedHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FixedHeader) GetMessageType() MessageType {
	if m != nil {
		return m.MessageType
	}
	return MessageType_RESERVED
}

func (m *FixedHeader) GetDup() bool {
	if m != nil {
		return m.Dup
	}
	return false
}

func (m *FixedHeader) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

func (m *FixedHeader) GetRetain() bool {
	if m != nil {
		return m.Retain
	}
	return false
}

func (m *FixedHeader) GetRemainingLength() int32 {
	if m != nil {
		return m.RemainingLength
	}
	return 0
}

// Connect represents a connect packet.
type Conn struct {
	ProtoName     string `protobuf:"bytes,1,opt,name=protoName" json:"protoName,omitempty"`
	Version       int32  `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	InsecureFlag  bool   `protobuf:"varint,3,opt,name=insecureFlag" json:"insecureFlag,omitempty"`
	UsernameFlag  bool   `protobuf:"varint,4,opt,name=usernameFlag" json:"usernameFlag,omitempty"`
	PasswordFlag  bool   `protobuf:"varint,5,opt,name=passwordFlag" json:"passwordFlag,omitempty"`
	CleanSessFlag bool   `protobuf:"varint,6,opt,name=cleanSessFlag" json:"cleanSessFlag,omitempty"`
	KeepAlive     int32  `protobuf:"varint,7,opt,name=keepAlive" json:"keepAlive,omitempty"`
	ClientID      string `protobuf:"bytes,8,opt,name=clientID" json:"clientID,omitempty"`
	Username      string `protobuf:"bytes,9,opt,name=username" json:"username,omitempty"`
	Password      string `protobuf:"bytes,10,opt,name=password" json:"password,omitempty"`
}

func (m *Conn) Reset()                    { *m = Conn{} }
func (m *Conn) String() string            { return proto.CompactTextString(m) }
func (*Conn) ProtoMessage()               {}
func (*Conn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Conn) GetProtoName() string {
	if m != nil {
		return m.ProtoName
	}
	return ""
}

func (m *Conn) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Conn) GetInsecureFlag() bool {
	if m != nil {
		return m.InsecureFlag
	}
	return false
}

func (m *Conn) GetUsernameFlag() bool {
	if m != nil {
		return m.UsernameFlag
	}
	return false
}

func (m *Conn) GetPasswordFlag() bool {
	if m != nil {
		return m.PasswordFlag
	}
	return false
}

func (m *Conn) GetCleanSessFlag() bool {
	if m != nil {
		return m.CleanSessFlag
	}
	return false
}

func (m *Conn) GetKeepAlive() int32 {
	if m != nil {
		return m.KeepAlive
	}
	return 0
}

func (m *Conn) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *Conn) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Conn) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Connack represents a connack packet.
// 0x00 connection accepted
// 0x01 refused: unacceptable proto version
// 0x02 refused: identifier rejected
// 0x03 refused server unavailiable
// 0x04 bad user or password
// 0x05 not authorized
type Connack struct {
	ReturnCode int32 `protobuf:"varint,1,opt,name=returnCode" json:"returnCode,omitempty"`
	ConnID     int32 `protobuf:"varint,2,opt,name=connID" json:"connID,omitempty"`
}

func (m *Connack) Reset()                    { *m = Connack{} }
func (m *Connack) String() string            { return proto.CompactTextString(m) }
func (*Connack) ProtoMessage()               {}
func (*Connack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Connack) GetReturnCode() int32 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

func (m *Connack) GetConnID() int32 {
	if m != nil {
		return m.ConnID
	}
	return 0
}

// Pingreq is a keepalive
type Pingreq struct {
}

func (m *Pingreq) Reset()                    { *m = Pingreq{} }
func (m *Pingreq) String() string            { return proto.CompactTextString(m) }
func (*Pingreq) ProtoMessage()               {}
func (*Pingreq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// Pingresp is for saying "hey, the server is alive"
type Pingresp struct {
}

func (m *Pingresp) Reset()                    { *m = Pingresp{} }
func (m *Pingresp) String() string            { return proto.CompactTextString(m) }
func (*Pingresp) ProtoMessage()               {}
func (*Pingresp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// Disconnect is to signal you want to cease communications with the server
type Disconnect struct {
	MessageID int32 `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
}

func (m *Disconnect) Reset()                    { *m = Disconnect{} }
func (m *Disconnect) String() string            { return proto.CompactTextString(m) }
func (*Disconnect) ProtoMessage()               {}
func (*Disconnect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Disconnect) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

// QueryRequest represents a query packet.
type QueryRequest struct {
	MessageID int32  `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	Topic     string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *QueryRequest) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *QueryRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

// Result is pairing the topic and the results together.
type Result struct {
	Topic string   `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Res   []string `protobuf:"bytes,2,rep,name=res" json:"res,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Result) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Result) GetRes() []string {
	if m != nil {
		return m.Res
	}
	return nil
}

// QueryResponse is sent to return the result of query
type QueryResponse struct {
	MessageID int32     `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	Results   []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Error     string    `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *QueryResponse) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *QueryResponse) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *QueryResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// PutRequest represents a put packet.
type PutRequest struct {
	MessageID int32  `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	Topic     string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	Payload   string `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	Ttl       string `protobuf:"bytes,4,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PutRequest) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *PutRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PutRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *PutRequest) GetTtl() string {
	if m != nil {
		return m.Ttl
	}
	return ""
}

// PutResponse is sent to verify the receipt of a put
type PutResponse struct {
	MessageID int32  `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PutResponse) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *PutResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// DeleteRequest represents a delete packet.
type DeleteRequest struct {
	MessageID int32  `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	Topic     string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DeleteRequest) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *DeleteRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

// DeleteResponse is sent to verify the receipt of a delete
type DeleteResponse struct {
	MessageID int32  `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeleteResponse) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *DeleteResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Publish represents a publish packet.
type Publish struct {
	MessageID int32  `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	Topic     string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	Payload   string `protobuf:"bytes,3,opt,name=payload" json:"payload,omitempty"`
	Qos       int32  `protobuf:"varint,4,opt,name=qos" json:"qos,omitempty"`
}

func (m *Publish) Reset()                    { *m = Publish{} }
func (m *Publish) String() string            { return proto.CompactTextString(m) }
func (*Publish) ProtoMessage()               {}
func (*Publish) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Publish) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *Publish) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Publish) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Publish) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

// Puback is sent for QOS level one to verify the receipt of a publish
// Qot the spec: "A PUBACK Packet is sent by a server in response to a PUBLISH Packet from a publishing client, and by a subscriber in response to a PUBLISH Packet from the server."
type Puback struct {
	MessageID int32 `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
}

func (m *Puback) Reset()                    { *m = Puback{} }
func (m *Puback) String() string            { return proto.CompactTextString(m) }
func (*Puback) ProtoMessage()               {}
func (*Puback) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Puback) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

// Pubrec is for verifying the receipt of a publish
// Qoth the spec:"It is the second Packet of the QoS level 2 protocol flow. A PUBREC Packet is sent by the server in response to a PUBLISH Packet from a publishing client, or by a subscriber in response to a PUBLISH Packet from the server."
type Pubrec struct {
	MessageID int32 `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	Qos       int32 `protobuf:"varint,2,opt,name=qos" json:"qos,omitempty"`
}

func (m *Pubrec) Reset()                    { *m = Pubrec{} }
func (m *Pubrec) String() string            { return proto.CompactTextString(m) }
func (*Pubrec) ProtoMessage()               {}
func (*Pubrec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Pubrec) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *Pubrec) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

// Pubrel is a response to pubrec from either the client or server.
type Pubrel struct {
	MessageID int32 `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	Qos       int32 `protobuf:"varint,2,opt,name=qos" json:"qos,omitempty"`
}

func (m *Pubrel) Reset()                    { *m = Pubrel{} }
func (m *Pubrel) String() string            { return proto.CompactTextString(m) }
func (*Pubrel) ProtoMessage()               {}
func (*Pubrel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Pubrel) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *Pubrel) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

// Pubcomp is for saying is in response to a pubrel sent by the publisher
// the final member of the QOS2 flow. both sides have said "hey, we did it!"
type Pubcomp struct {
	MessageID int32 `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
}

func (m *Pubcomp) Reset()                    { *m = Pubcomp{} }
func (m *Pubcomp) String() string            { return proto.CompactTextString(m) }
func (*Pubcomp) ProtoMessage()               {}
func (*Pubcomp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Pubcomp) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

// Subscriber is pairing the Qos and topic together
// for the QOS' pairs in unsubscribe and subscribe
type Subscriber struct {
	Topic string `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	Qos   int32  `protobuf:"varint,3,opt,name=qos" json:"qos,omitempty"`
}

func (m *Subscriber) Reset()                    { *m = Subscriber{} }
func (m *Subscriber) String() string            { return proto.CompactTextString(m) }
func (*Subscriber) ProtoMessage()               {}
func (*Subscriber) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Subscriber) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Subscriber) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

// Subscribe tells the server which topics the client would like to subscribe to
type Subscribe struct {
	MessageID   int32         `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	Subscribers []*Subscriber `protobuf:"bytes,2,rep,name=subscribers" json:"subscribers,omitempty"`
}

func (m *Subscribe) Reset()                    { *m = Subscribe{} }
func (m *Subscribe) String() string            { return proto.CompactTextString(m) }
func (*Subscribe) ProtoMessage()               {}
func (*Subscribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Subscribe) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *Subscribe) GetSubscribers() []*Subscriber {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

// Suback is to say "hey, you got it buddy. I will send you messages that fit this pattern"
type Suback struct {
	MessageID int32   `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	Qos       []int32 `protobuf:"varint,2,rep,packed,name=qos" json:"qos,omitempty"`
}

func (m *Suback) Reset()                    { *m = Suback{} }
func (m *Suback) String() string            { return proto.CompactTextString(m) }
func (*Suback) ProtoMessage()               {}
func (*Suback) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Suback) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *Suback) GetQos() []int32 {
	if m != nil {
		return m.Qos
	}
	return nil
}

// Unsubscribe is the Packet to send if you don't want to subscribe to a topic anymore
type Unsubscribe struct {
	MessageID   int32         `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
	Subscribers []*Subscriber `protobuf:"bytes,2,rep,name=subscribers" json:"subscribers,omitempty"`
}

func (m *Unsubscribe) Reset()                    { *m = Unsubscribe{} }
func (m *Unsubscribe) String() string            { return proto.CompactTextString(m) }
func (*Unsubscribe) ProtoMessage()               {}
func (*Unsubscribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Unsubscribe) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func (m *Unsubscribe) GetSubscribers() []*Subscriber {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

// Unsuback is to unsubscribe as suback is to subscribe
type Unsuback struct {
	MessageID int32 `protobuf:"varint,1,opt,name=messageID" json:"messageID,omitempty"`
}

func (m *Unsuback) Reset()                    { *m = Unsuback{} }
func (m *Unsuback) String() string            { return proto.CompactTextString(m) }
func (*Unsuback) ProtoMessage()               {}
func (*Unsuback) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *Unsuback) GetMessageID() int32 {
	if m != nil {
		return m.MessageID
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*Packet)(nil), "Packet")
	proto.RegisterType((*ConnInfo)(nil), "ConnInfo")
	proto.RegisterType((*InMsg)(nil), "InMsg")
	proto.RegisterType((*OutMsg)(nil), "OutMsg")
	proto.RegisterType((*FixedHeader)(nil), "FixedHeader")
	proto.RegisterType((*Conn)(nil), "Conn")
	proto.RegisterType((*Connack)(nil), "Connack")
	proto.RegisterType((*Pingreq)(nil), "Pingreq")
	proto.RegisterType((*Pingresp)(nil), "Pingresp")
	proto.RegisterType((*Disconnect)(nil), "Disconnect")
	proto.RegisterType((*QueryRequest)(nil), "QueryRequest")
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*QueryResponse)(nil), "QueryResponse")
	proto.RegisterType((*PutRequest)(nil), "PutRequest")
	proto.RegisterType((*PutResponse)(nil), "PutResponse")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterType((*Publish)(nil), "Publish")
	proto.RegisterType((*Puback)(nil), "Puback")
	proto.RegisterType((*Pubrec)(nil), "Pubrec")
	proto.RegisterType((*Pubrel)(nil), "Pubrel")
	proto.RegisterType((*Pubcomp)(nil), "Pubcomp")
	proto.RegisterType((*Subscriber)(nil), "Subscriber")
	proto.RegisterType((*Subscribe)(nil), "Subscribe")
	proto.RegisterType((*Suback)(nil), "Suback")
	proto.RegisterType((*Unsubscribe)(nil), "Unsubscribe")
	proto.RegisterType((*Unsuback)(nil), "Unsuback")
	proto.RegisterEnum("MessageType", MessageType_name, MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Unitdb service

type UnitdbClient interface {
	Start(ctx context.Context, in *ConnInfo, opts ...grpc.CallOption) (*ConnInfo, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (Unitdb_StreamClient, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type unitdbClient struct {
	cc *grpc.ClientConn
}

func NewUnitdbClient(cc *grpc.ClientConn) UnitdbClient {
	return &unitdbClient{cc}
}

func (c *unitdbClient) Start(ctx context.Context, in *ConnInfo, opts ...grpc.CallOption) (*ConnInfo, error) {
	out := new(ConnInfo)
	err := grpc.Invoke(ctx, "/Unitdb/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unitdbClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Unitdb_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Unitdb_serviceDesc.Streams[0], c.cc, "/Unitdb/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &unitdbStreamClient{stream}
	return x, nil
}

type Unitdb_StreamClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type unitdbStreamClient struct {
	grpc.ClientStream
}

func (x *unitdbStreamClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *unitdbStreamClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *unitdbClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/Unitdb/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Unitdb service

type UnitdbServer interface {
	Start(context.Context, *ConnInfo) (*ConnInfo, error)
	Stream(Unitdb_StreamServer) error
	Stop(context.Context, *Empty) (*Empty, error)
}

func RegisterUnitdbServer(s *grpc.Server, srv UnitdbServer) {
	s.RegisterService(&_Unitdb_serviceDesc, srv)
}

func _Unitdb_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitdbServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Unitdb/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitdbServer).Start(ctx, req.(*ConnInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Unitdb_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UnitdbServer).Stream(&unitdbStreamServer{stream})
}

type Unitdb_StreamServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type unitdbStreamServer struct {
	grpc.ServerStream
}

func (x *unitdbStreamServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *unitdbStreamServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Unitdb_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnitdbServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Unitdb/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnitdbServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Unitdb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Unitdb",
	HandlerType: (*UnitdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Unitdb_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Unitdb_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Unitdb_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "unitdb.proto",
}

func init() { proto.RegisterFile("unitdb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5d, 0x6f, 0xdb, 0x36,
	0x17, 0xf6, 0x97, 0x24, 0xeb, 0xc8, 0x49, 0xf4, 0xf2, 0x2d, 0x06, 0x23, 0x2b, 0xfa, 0x21, 0x64,
	0x6b, 0xd0, 0x61, 0x46, 0x91, 0xed, 0x62, 0xb7, 0x89, 0xed, 0x2e, 0xc6, 0x92, 0xd4, 0xa5, 0xe2,
	0x61, 0x1f, 0x17, 0x83, 0x2c, 0xb1, 0xa9, 0x10, 0x59, 0x52, 0x48, 0xaa, 0x5d, 0xfe, 0xc1, 0xfe,
	0xc3, 0x2e, 0xf7, 0x4f, 0x76, 0xb1, 0xdf, 0x35, 0x1c, 0x92, 0xb2, 0x9c, 0x0d, 0xab, 0xb7, 0xa2,
	0x57, 0xe6, 0x39, 0xcf, 0xa3, 0xf3, 0xf1, 0x90, 0x3c, 0x26, 0x0c, 0xaa, 0x3c, 0x95, 0xc9, 0x72,
	0x54, 0xf2, 0x42, 0x16, 0x81, 0x03, 0xd6, 0x74, 0x55, 0xca, 0xdb, 0xe0, 0x3e, 0xd8, 0xf3, 0x28,
	0xbe, 0x66, 0x92, 0x10, 0xe8, 0x25, 0x91, 0x8c, 0x86, 0xed, 0x47, 0xed, 0xc3, 0x01, 0x55, 0xeb,
	0xe0, 0x47, 0xe8, 0x8f, 0x8b, 0x3c, 0x9f, 0xe5, 0xaf, 0x0a, 0xf2, 0x31, 0xb8, 0x71, 0x96, 0xb2,
	0x5c, 0xfe, 0x94, 0x26, 0x8a, 0xe4, 0xd2, 0xbe, 0x76, 0xcc, 0x12, 0x32, 0x04, 0x27, 0x67, 0xf2,
	0x6d, 0xc1, 0xaf, 0x87, 0x1d, 0x05, 0xd5, 0x26, 0x22, 0x51, 0x92, 0x70, 0x26, 0xc4, 0xb0, 0xab,
	0x11, 0x63, 0x06, 0xbf, 0x74, 0xc0, 0x9a, 0xe5, 0xe7, 0xe2, 0x8a, 0x1c, 0x80, 0x53, 0xa6, 0xf9,
	0x15, 0x67, 0x37, 0x2a, 0xb0, 0x77, 0xd4, 0x1f, 0xcd, 0xb5, 0x7d, 0xda, 0xa2, 0x35, 0x44, 0x1e,
	0x40, 0x57, 0x54, 0x4b, 0x15, 0xdf, 0x3b, 0x82, 0x51, 0x58, 0x2d, 0x45, 0xcc, 0xd3, 0x25, 0x3b,
	0x6d, 0x51, 0x04, 0xc8, 0x01, 0x58, 0x55, 0x8e, 0x8c, 0xae, 0x62, 0x0c, 0x46, 0x0b, 0xb4, 0xd6,
	0x1c, 0x0d, 0x92, 0xfb, 0xd0, 0x2d, 0xab, 0xe5, 0xb0, 0x57, 0xe7, 0xa9, 0x96, 0x59, 0x2a, 0x5e,
	0x63, 0x8c, 0xb2, 0x5a, 0x92, 0x4f, 0xc0, 0xba, 0xa9, 0x18, 0xbf, 0x1d, 0x5a, 0x0a, 0xdf, 0x19,
	0xbd, 0x44, 0x8b, 0xb2, 0x9b, 0x8a, 0x09, 0x89, 0x41, 0x14, 0x4a, 0x1e, 0x62, 0x10, 0x39, 0xb4,
	0x15, 0xc9, 0x1b, 0xcd, 0x2b, 0xd9, 0x50, 0x10, 0x21, 0x01, 0x74, 0x13, 0x96, 0x0d, 0x1d, 0x45,
	0xd8, 0x1d, 0x4d, 0x58, 0xc6, 0x24, 0xdb, 0xe0, 0x24, 0x2c, 0x3b, 0x71, 0xc1, 0x39, 0x67, 0x42,
	0x44, 0x57, 0x2c, 0xf8, 0xa3, 0x03, 0xf6, 0x8b, 0x4a, 0xa2, 0x16, 0x4f, 0xa0, 0xaf, 0x1b, 0x16,
	0xa5, 0x11, 0xc3, 0x35, 0x62, 0x88, 0xf2, 0xb4, 0x45, 0xd7, 0x20, 0x79, 0x0c, 0xb6, 0xa8, 0x96,
	0x51, 0x7c, 0x6d, 0x14, 0x71, 0x50, 0x91, 0x28, 0xbe, 0x3e, 0x6d, 0x51, 0x03, 0x60, 0x2c, 0xd5,
	0x34, 0x92, 0xba, 0x26, 0xd6, 0xc2, 0x38, 0x30, 0x56, 0x0d, 0x6e, 0x11, 0xe5, 0x31, 0xd8, 0xa5,
	0x0e, 0x62, 0x99, 0x4c, 0xf3, 0x75, 0x26, 0x0d, 0x90, 0x03, 0xe8, 0xa9, 0x8a, 0x6d, 0xd3, 0xb0,
	0x91, 0x4d, 0x94, 0x45, 0x2e, 0x50, 0x7c, 0x85, 0x92, 0x43, 0x70, 0xca, 0x4a, 0x2a, 0xa2, 0x63,
	0xf6, 0x48, 0x49, 0xb7, 0xa6, 0xd5, 0x30, 0xf9, 0x0c, 0x9c, 0x84, 0x65, 0x8a, 0xd9, 0x57, 0xcc,
	0xbd, 0xb5, 0x86, 0x0d, 0xd9, 0x30, 0x36, 0x85, 0xfc, 0xad, 0x0d, 0xde, 0xf3, 0xf4, 0x67, 0x96,
	0x9c, 0xb2, 0x28, 0x61, 0x9c, 0x8c, 0xc0, 0x5b, 0x69, 0xe8, 0xf2, 0xb6, 0x64, 0x4a, 0xd0, 0xdd,
	0xa3, 0xc1, 0xe8, 0xbc, 0xf1, 0xd1, 0x4d, 0x02, 0xf1, 0xa1, 0x9b, 0x54, 0xa5, 0x52, 0xb4, 0x4f,
	0x71, 0x89, 0x9e, 0x9b, 0x42, 0x9f, 0x5d, 0x8b, 0xe2, 0x92, 0x7c, 0x04, 0x36, 0x67, 0x32, 0x4a,
	0x73, 0xa5, 0x57, 0x9f, 0x1a, 0x8b, 0x1c, 0xc2, 0x1e, 0x67, 0xab, 0x28, 0xcd, 0xd3, 0xfc, 0xea,
	0x8c, 0xe5, 0x57, 0xf2, 0xb5, 0xd2, 0xcb, 0xa2, 0x7f, 0x75, 0x07, 0xbf, 0x77, 0xa0, 0x87, 0xf7,
	0x8a, 0xdc, 0x07, 0x57, 0xdd, 0xc7, 0x8b, 0x68, 0xc5, 0xcc, 0x9d, 0x6a, 0x1c, 0x78, 0x75, 0xde,
	0x30, 0x2e, 0xd2, 0x22, 0x57, 0x05, 0x59, 0xb4, 0x36, 0x49, 0x00, 0x83, 0x34, 0x17, 0x2c, 0xae,
	0x38, 0x7b, 0x9e, 0x45, 0x57, 0xaa, 0xba, 0x3e, 0xbd, 0xe3, 0x43, 0x4e, 0x25, 0x18, 0xcf, 0xa3,
	0x95, 0xe6, 0xe8, 0x62, 0xef, 0xf8, 0x90, 0x53, 0x46, 0x42, 0xbc, 0x2d, 0x78, 0xa2, 0x38, 0x96,
	0xe6, 0x6c, 0xfa, 0xc8, 0x01, 0xec, 0xc4, 0x19, 0x8b, 0xf2, 0x90, 0x09, 0xa1, 0x48, 0xb6, 0x22,
	0xdd, 0x75, 0x62, 0x27, 0xd7, 0x8c, 0x95, 0xc7, 0x59, 0xfa, 0x86, 0xa9, 0xcd, 0xb5, 0x68, 0xe3,
	0x20, 0xfb, 0x50, 0x8f, 0x8a, 0x89, 0xda, 0xcf, 0x66, 0x74, 0x4c, 0x10, 0xab, 0x6b, 0x1a, 0xba,
	0x1a, 0xab, 0x6d, 0xc4, 0xea, 0x5a, 0x86, 0xa0, 0xb1, 0xda, 0x0e, 0x8e, 0xc1, 0x41, 0x0d, 0xf1,
	0xf4, 0x3d, 0x00, 0xe0, 0x4c, 0x56, 0x3c, 0x1f, 0x17, 0x89, 0xd6, 0xd1, 0xa2, 0x1b, 0x1e, 0xdc,
	0xb1, 0x18, 0xc7, 0xd8, 0xc4, 0xe8, 0x68, 0xac, 0xc0, 0x05, 0xc7, 0xcc, 0x99, 0x00, 0xa0, 0x5f,
	0xdf, 0xb2, 0xe0, 0x29, 0xc0, 0x24, 0x15, 0xc8, 0x61, 0xb1, 0xc4, 0xce, 0xcc, 0x09, 0x99, 0x4d,
	0x4c, 0xec, 0xc6, 0x11, 0x9c, 0xc0, 0x60, 0x73, 0x44, 0xbc, 0x9b, 0x4d, 0xee, 0x81, 0x25, 0x8b,
	0x32, 0x8d, 0xcd, 0x90, 0xd4, 0x46, 0xf0, 0x0c, 0x6c, 0xca, 0x44, 0x95, 0xc9, 0x06, 0x6f, 0x6f,
	0xe0, 0x78, 0x04, 0x39, 0x13, 0xc3, 0xce, 0xa3, 0xee, 0xa1, 0x4b, 0x71, 0x19, 0xbc, 0x82, 0x9d,
	0x3b, 0x37, 0x6c, 0x4b, 0xda, 0xc7, 0xe0, 0x70, 0x95, 0x40, 0x07, 0xc1, 0x1b, 0xac, 0x13, 0xd2,
	0xda, 0x8f, 0x99, 0x19, 0xe7, 0x05, 0x37, 0x43, 0x5a, 0x1b, 0x41, 0x06, 0xd0, 0xcc, 0xb6, 0xf7,
	0xe9, 0x0d, 0xcf, 0x70, 0x19, 0xdd, 0x66, 0x45, 0x94, 0xd4, 0xe3, 0xdf, 0x98, 0xd8, 0x95, 0x94,
	0x99, 0x3a, 0x96, 0x2e, 0xc5, 0x65, 0x70, 0x0c, 0xde, 0xc6, 0x38, 0xd8, 0x9e, 0x4e, 0x17, 0xdc,
	0xd9, 0x2c, 0x78, 0x0c, 0x3b, 0x77, 0x66, 0xed, 0x7b, 0xed, 0xc7, 0x04, 0x76, 0xef, 0x0e, 0x9b,
	0xf7, 0x2a, 0x25, 0x05, 0xc7, 0xcc, 0xd1, 0x0f, 0x2f, 0x1c, 0x4e, 0xa4, 0xde, 0x7a, 0x22, 0x05,
	0x9f, 0x82, 0x3d, 0xaf, 0x07, 0xf9, 0xbb, 0x0e, 0xeb, 0x57, 0x8a, 0xc7, 0x59, 0xbc, 0xa5, 0x22,
	0x93, 0xa1, 0xd3, 0x64, 0xa8, 0xbf, 0xcc, 0xfe, 0xf3, 0x97, 0x4f, 0x94, 0x0c, 0x71, 0xb1, 0x2a,
	0xb7, 0x14, 0xf7, 0x25, 0xc0, 0xfa, 0x2f, 0x9d, 0xff, 0x83, 0x28, 0x7f, 0x1b, 0xc6, 0xc1, 0x77,
	0xe0, 0xae, 0xbf, 0xda, 0x52, 0xdb, 0xe7, 0xe0, 0xad, 0xdf, 0x03, 0xbc, 0xbe, 0x09, 0x5e, 0xf3,
	0x8e, 0xe0, 0x74, 0x13, 0xc7, 0x96, 0xc3, 0x7f, 0x21, 0x6a, 0xd3, 0x72, 0xb7, 0xae, 0xe9, 0x07,
	0xf0, 0x36, 0x9e, 0x1e, 0x1f, 0xb6, 0xaa, 0x43, 0xe8, 0x2f, 0x9a, 0x7f, 0xed, 0x77, 0x04, 0x7e,
	0xfa, 0x6b, 0x07, 0xbc, 0x8d, 0xff, 0x39, 0x32, 0x80, 0x3e, 0x9d, 0x86, 0x53, 0xfa, 0xed, 0x74,
	0xe2, 0xb7, 0x88, 0x07, 0xce, 0xf8, 0xc5, 0xc5, 0xc5, 0x74, 0x7c, 0xe9, 0xb7, 0x6b, 0xe3, 0x78,
	0xfc, 0x8d, 0xdf, 0x41, 0x63, 0xbe, 0x38, 0x39, 0x9b, 0x85, 0xa7, 0x7e, 0x97, 0x00, 0xd8, 0xf3,
	0xc5, 0x09, 0x02, 0x3d, 0xb3, 0xa6, 0xd3, 0xb1, 0x6f, 0xad, 0xd7, 0x67, 0xbe, 0x6d, 0x3e, 0x18,
	0xbf, 0x38, 0x9f, 0xfb, 0x0e, 0xd9, 0x01, 0x37, 0x5c, 0x9c, 0x84, 0x63, 0x3a, 0x3b, 0x99, 0xfa,
	0x7d, 0xe4, 0x85, 0xfa, 0x7b, 0x97, 0xec, 0x81, 0xb7, 0xb8, 0x68, 0x40, 0xc0, 0x8a, 0x94, 0x03,
	0x61, 0x4f, 0x85, 0x99, 0x5d, 0x7c, 0x4d, 0xa7, 0x2f, 0xfd, 0x01, 0x42, 0xda, 0x08, 0xe7, 0xfe,
	0x0e, 0x71, 0xc1, 0x7a, 0xb9, 0x98, 0xd2, 0xef, 0xfd, 0x5d, 0x0c, 0x48, 0xa7, 0xe1, 0xe2, 0xec,
	0xd2, 0xdf, 0x23, 0x0e, 0x74, 0xe7, 0x8b, 0x4b, 0xdf, 0xd7, 0x15, 0x5c, 0x2a, 0xf2, 0xff, 0xd0,
	0x3b, 0x99, 0x9e, 0xf9, 0x04, 0xbd, 0x93, 0xe9, 0x99, 0xf2, 0xfe, 0x9f, 0xec, 0x02, 0x4c, 0x66,
	0x61, 0xdd, 0xf2, 0xbd, 0xa3, 0x18, 0xec, 0x85, 0x7a, 0x10, 0x93, 0x87, 0x60, 0x85, 0x32, 0xe2,
	0x92, 0xb8, 0xa3, 0xfa, 0xad, 0xbb, 0xdf, 0x2c, 0x83, 0x16, 0x79, 0x00, 0x76, 0x28, 0x39, 0x8b,
	0x56, 0xc4, 0x19, 0xe9, 0xb7, 0xf2, 0x7e, 0xbd, 0x38, 0x6c, 0x3f, 0x6b, 0x93, 0x21, 0xf4, 0x42,
	0x59, 0x94, 0xc4, 0x1e, 0xa9, 0x27, 0xf5, 0xbe, 0xf9, 0x0d, 0x5a, 0x4b, 0x5b, 0xfd, 0x97, 0x7f,
	0xf1, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x06, 0x0c, 0x60, 0x7c, 0x0b, 0x00, 0x00,
}
