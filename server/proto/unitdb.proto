syntax = "proto3";

// Unitdb interface
service Unitdb {
rpc Start (ConnInfo) returns (ConnInfo){}

rpc Stream (stream Packet) returns (stream Packet);

rpc Stop (Empty) returns (Empty){}
}

message Empty {
}

message Packet {
bytes data=1;
}

message ConnInfo {
string client_id=1;
string network=2;
string address=3;
}

message InMsg {
	oneof Message {
		Pingreq pingreq = 1;
		Subscribe sub = 2;
		Unsubscribe unsub = 3;
		Publish pub=4;
		QueryRequest query = 5;
		PutRequest put = 6;
		DeleteRequest del = 7;
	}
}

message OutMsg {
	oneof Message {
		Pingresp pingresp = 1;
		Suback suback = 2;
		Unsuback unsuback = 3;
		Publish pub = 4;
		Puback puback = 5;
		QueryResponse resp = 6;
		PutResponse putresp = 7;
		DeleteResponse delresp = 8;
	}
}

enum MessageType {
	RESERVED  = 0;
	CONNECT=1;
	CONNACK=2;
	PUBLISH=3;
	PUBACK=4;
	PUBREC=5;
	PUBREL=6;
	PUBCOMP=7;
	SUBSCRIBE=8;
	SUBACK=9;
	UNSUBSCRIBE=10;
	UNSUBACK=11;
	PINGREQ=12;
	PINGRESP=13;
	QUERY=14;
	RESULT=15;
	PUT=16;
    PUTRESP=17;
    DEL=18;
	DELRESP=19;
	DISCONNECT=20;
}

message FixedHeader {
	MessageType messageType = 1;
	bool dup=2;
	int32 qos=3;
	bool retain=4;
	int32 remainingLength=5;
}

// Connect represents a connect packet.
message Conn {
	string protoName=1;
	int32 version=2;
	bool insecureFlag=3;
	bool usernameFlag=4;
	bool passwordFlag=5;
	bool cleanSessFlag=6;
	int32 keepAlive=7;
	string clientID=8;
	string username=9;
	string password=10;
}

// Connack represents a connack packet.
// 0x00 connection accepted
// 0x01 refused: unacceptable proto version
// 0x02 refused: identifier rejected
// 0x03 refused server unavailiable
// 0x04 bad user or password
// 0x05 not authorized
message Connack {
	int32 returnCode=1;
	int32 connID=2;
}

//Pingreq is a keepalive
message Pingreq {
}

//Pingresp is for saying "hey, the server is alive"
message Pingresp {
}

//Disconnect is to signal you want to cease communications with the server
message Disconnect {
	int32 messageID=1;
}

// QueryRequest represents a query packet.
message QueryRequest {
	int32 messageID=1;
	string topic=2;
}

// Result is pairing the topic and the results together.
message Result {
	string topic=1;
	repeated string res=2;
}

// QueryResponse is sent to return the result of query
message QueryResponse {
	int32 messageID=1;
	repeated Result results=2;
    string error=3;
}

// PutRequest represents a put packet.
message PutRequest {
	int32 messageID=1;
	string topic=2;
	string payload=3;
    string ttl=4;
}

// PutResponse is sent to verify the receipt of a put
message PutResponse {
	int32 messageID=1;
    string error=2;
}

// DeleteRequest represents a delete packet.
message DeleteRequest {
	int32 messageID=1;
	string topic=2;
}

// DeleteResponse is sent to verify the receipt of a delete
message DeleteResponse {
	int32 messageID=1;
    string error=2;
}

// Publish represents a publish packet.
message Publish {
	int32 messageID=1;
	string topic=2;
	string payload=3;
	int32 qos=4;
}

//Puback is sent for QOS level one to verify the receipt of a publish
//Qot the spec: "A PUBACK Packet is sent by a server in response to a PUBLISH Packet from a publishing client, and by a subscriber in response to a PUBLISH Packet from the server."
message Puback {
	int32 messageID=1;
}

//Pubrec is for verifying the receipt of a publish
//Qoth the spec:"It is the second Packet of the QoS level 2 protocol flow. A PUBREC Packet is sent by the server in response to a PUBLISH Packet from a publishing client, or by a subscriber in response to a PUBLISH Packet from the server."
message Pubrec {
	int32 messageID=1;
	int32 qos=2;
}

//Pubrel is a response to pubrec from either the client or server.
message Pubrel {
	int32 messageID=1;
	int32 qos=2;
}

//Pubcomp is for saying is in response to a pubrel sent by the publisher
//the final member of the QOS2 flow. both sides have said "hey, we did it!"
message Pubcomp {
	int32 messageID=1;
}

//Subscriber is pairing the Qos and topic together
//for the QOS' pairs in unsubscribe and subscribe
message Subscriber {
	string topic=2;
	int32 qos=3;
}

//Subscribe tells the server which topics the client would like to subscribe to
message Subscribe {
	int32 messageID=1;
	repeated Subscriber subscribers=2;
}

//Suback is to say "hey, you got it buddy. I will send you messages that fit this pattern"
message Suback {
	int32 messageID=1;
	repeated int32 qos=2;
}

//Unsubscribe is the Packet to send if you don't want to subscribe to a topic anymore
message Unsubscribe {
	int32 messageID=1;
	repeated Subscriber subscribers=2;
}

//Unsuback is to unsubscribe as suback is to subscribe
message Unsuback {
	int32 messageID=1;
}